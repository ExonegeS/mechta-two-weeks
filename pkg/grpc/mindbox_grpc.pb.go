// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: mindbox.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MindboxService_GetFinalPriceInfo_FullMethodName = "/mindbox.MindboxService/GetFinalPriceInfo"
	MindboxService_GetPromotionsInfo_FullMethodName = "/mindbox.MindboxService/GetPromotionsInfo"
)

// MindboxServiceClient is the client API for MindboxService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MindboxServiceClient interface {
	GetFinalPriceInfo(ctx context.Context, in *GetFinalPriceInfoRequest, opts ...grpc.CallOption) (*GetFinalPriceInfoResponse, error)
	GetPromotionsInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetPromoInfoResponse, error)
}

type mindboxServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMindboxServiceClient(cc grpc.ClientConnInterface) MindboxServiceClient {
	return &mindboxServiceClient{cc}
}

func (c *mindboxServiceClient) GetFinalPriceInfo(ctx context.Context, in *GetFinalPriceInfoRequest, opts ...grpc.CallOption) (*GetFinalPriceInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFinalPriceInfoResponse)
	err := c.cc.Invoke(ctx, MindboxService_GetFinalPriceInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mindboxServiceClient) GetPromotionsInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetPromoInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPromoInfoResponse)
	err := c.cc.Invoke(ctx, MindboxService_GetPromotionsInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MindboxServiceServer is the server API for MindboxService service.
// All implementations must embed UnimplementedMindboxServiceServer
// for forward compatibility.
type MindboxServiceServer interface {
	GetFinalPriceInfo(context.Context, *GetFinalPriceInfoRequest) (*GetFinalPriceInfoResponse, error)
	GetPromotionsInfo(context.Context, *Empty) (*GetPromoInfoResponse, error)
	mustEmbedUnimplementedMindboxServiceServer()
}

// UnimplementedMindboxServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMindboxServiceServer struct{}

func (UnimplementedMindboxServiceServer) GetFinalPriceInfo(context.Context, *GetFinalPriceInfoRequest) (*GetFinalPriceInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFinalPriceInfo not implemented")
}
func (UnimplementedMindboxServiceServer) GetPromotionsInfo(context.Context, *Empty) (*GetPromoInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPromotionsInfo not implemented")
}
func (UnimplementedMindboxServiceServer) mustEmbedUnimplementedMindboxServiceServer() {}
func (UnimplementedMindboxServiceServer) testEmbeddedByValue()                        {}

// UnsafeMindboxServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MindboxServiceServer will
// result in compilation errors.
type UnsafeMindboxServiceServer interface {
	mustEmbedUnimplementedMindboxServiceServer()
}

func RegisterMindboxServiceServer(s grpc.ServiceRegistrar, srv MindboxServiceServer) {
	// If the following call pancis, it indicates UnimplementedMindboxServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MindboxService_ServiceDesc, srv)
}

func _MindboxService_GetFinalPriceInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFinalPriceInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MindboxServiceServer).GetFinalPriceInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MindboxService_GetFinalPriceInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MindboxServiceServer).GetFinalPriceInfo(ctx, req.(*GetFinalPriceInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MindboxService_GetPromotionsInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MindboxServiceServer).GetPromotionsInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MindboxService_GetPromotionsInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MindboxServiceServer).GetPromotionsInfo(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// MindboxService_ServiceDesc is the grpc.ServiceDesc for MindboxService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MindboxService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mindbox.MindboxService",
	HandlerType: (*MindboxServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFinalPriceInfo",
			Handler:    _MindboxService_GetFinalPriceInfo_Handler,
		},
		{
			MethodName: "GetPromotionsInfo",
			Handler:    _MindboxService_GetPromotionsInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mindbox.proto",
}
